
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(email) {
      return exists(/databases/$(database)/documents/profiles/$(email)) &&
             get(/databases/$(database)/documents/profiles/$(email)).data.role == 'owner';
    }

    function isAdmin(email) {
      return exists(/databases/$(database)/documents/profiles/$(email)) &&
             get(/databases/$(database)/documents/profiles/$(email)).data.role == 'admin';
    }

    // Profiles can be read by anyone, but only written by the user themselves or an admin.
    match /profiles/{email} {
      allow read: if true;
      allow write: if request.auth.token.email == email || isAdmin(request.auth.token.email);
    }
    
    // Routes can be read by anyone. Only owners or admins can create/update/delete.
    match /routes/{routeId} {
      allow read: if true;
      allow create: if isOwner(request.auth.token.email) || isAdmin(request.auth.token.email);
      allow update, delete: if resource.data.ownerEmail == request.auth.token.email || isAdmin(request.auth.token.email);
    }

    // Bookings can be read by the client, the driver, or an admin.
    // They can be created by any authenticated user.
    // They can only be updated/deleted by the client who made them, the driver, or an admin.
    match /bookings/{bookingId} {
      allow read: if request.auth.token.email == resource.data.clientEmail 
                   || request.auth.token.email == resource.data.driverEmail 
                   || isAdmin(request.auth.token.email);
      allow create: if request.auth != null;
      allow update, delete: if request.auth.token.email == resource.data.clientEmail 
                         || request.auth.token.email == resource.data.driverEmail
                         || isAdmin(request.auth.token.email);
    }
    
    // Settings can only be read/written by an admin
    match /settings/{settingId} {
       allow read, write: if isAdmin(request.auth.token.email);
    }

    // Visits can be written by any authenticated user
     match /visits/{visitId} {
       allow read, write: if isAdmin(request.auth.token.email);
       allow create: if request.auth != null;
    }
    
    // Video events can be written by any authenticated user
     match /video_events/{eventId} {
       allow read, write: if isAdmin(request.auth.token.email);
       allow create: if request.auth != null;
    }
  }
}
